import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import { QuranData } from "@/types/quran";

export interface PDFGeneratorOptions {
  pageWidth: number;
  pageHeight: number;
  margin: number;
  contentWidth: number;
}

export class PDFGenerator {
  private pdf: jsPDF;
  private options: PDFGeneratorOptions;
  private currentY: number;

  constructor(pdf: jsPDF) {
    this.pdf = pdf;
    this.options = {
      pageWidth: pdf.internal.pageSize.getWidth(),
      pageHeight: pdf.internal.pageSize.getHeight(),
      margin: 15,
      contentWidth: 0
    };
    this.options.contentWidth = this.options.pageWidth - (2 * this.options.margin);
    this.currentY = this.options.margin;
  }

  addNewPage() {
    this.pdf.addPage();
    this.currentY = this.options.margin;
  }

  async renderElement(htmlContent: string, addSpacing: number = 10): Promise<void> {
    try {
      // Sanitize HTML content to prevent string length errors
      const sanitizeHTML = (html: string): string => {
        if (!html) return '';
        // Only remove extremely long strings (more than 10000 chars) that might cause issues
        return html.replace(/([^\s]{10000,})/g, (match) => match.substring(0, 10000) + '...');
      };

      const sanitizedContent = sanitizeHTML(htmlContent);
      
      const tempDiv = document.createElement('div');
      tempDiv.style.position = 'absolute';
      tempDiv.style.left = '-9999px';
      tempDiv.style.width = `${this.options.contentWidth * 3.78}px`;
      tempDiv.style.backgroundColor = 'white';
      tempDiv.style.padding = '0';
      tempDiv.style.fontFamily = 'Arial, sans-serif';
      
      tempDiv.innerHTML = sanitizedContent;
      document.body.appendChild(tempDiv);
      
      const canvas = await html2canvas(tempDiv, {
        scale: 1,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        logging: false // Disable logging to reduce memory usage
      });
      
      document.body.removeChild(tempDiv);
      
      const imgData = canvas.toDataURL('image/jpeg', 0.85);
      const elementHeight = (canvas.height * this.options.contentWidth) / canvas.width;
      
      if ((this.currentY + elementHeight) > (this.options.pageHeight - this.options.margin)) {
        this.addNewPage();
      }
      
      this.pdf.addImage(imgData, 'JPEG', this.options.margin, this.currentY, this.options.contentWidth, elementHeight);
      this.currentY += elementHeight + addSpacing;
    } catch (error) {
      console.error('Error rendering element:', error);
      // Add a simple text fallback if rendering fails
      this.pdf.setFontSize(12);
      this.pdf.setTextColor(0, 0, 0);
      this.pdf.text('Content rendering failed', this.options.margin, this.currentY);
      this.currentY += 20;
    }
  }

  addFooter() {
    const footerY = this.options.pageHeight - this.options.margin - 10;
    this.pdf.setFontSize(10);
    this.pdf.setTextColor(107, 114, 128);
    this.pdf.text('Generated by Quran PDF Generator', this.options.pageWidth / 2, footerY, { align: 'center' });
    this.pdf.text(`quran.com API â€¢ ${new Date().toLocaleDateString()}`, this.options.pageWidth / 2, footerY + 5, { align: 'center' });
  }

  save(filename: string) {
    this.pdf.save(filename);
  }
}