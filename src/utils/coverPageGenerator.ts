import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import { surahList } from "@/utils/surahList";
import { QuranData } from "@/types/quran";

export interface CoverPageOptions {
  title: string;
  subtitle: string;
  includeDate: boolean;
  includeStats: boolean;
}

export class CoverPageGenerator {
  private pdf: jsPDF;
  private pageWidth: number;
  private pageHeight: number;
  private margin: number;

  constructor(pdf: jsPDF) {
    this.pdf = pdf;
    this.pageWidth = pdf.internal.pageSize.getWidth();
    this.pageHeight = pdf.internal.pageSize.getHeight();
    this.margin = 15;
  }

  async generate(
    selectedSurahs: number[], 
    quranDataList: QuranData[], 
    options: CoverPageOptions
  ): Promise<void> {
    const totalVerses = quranDataList.reduce((sum, data) => sum + data.chapter.verses_count, 0);
    const surahNames = selectedSurahs.map(id => 
      surahList.find(s => s.id === id)?.name || `Surah ${id}`
    );
    
    const coverContent = this.generateCoverHTML(
      selectedSurahs, 
      surahNames, 
      totalVerses, 
      options
    );
    
    await this.renderCoverPage(coverContent);
  }

  private generateCoverHTML(
    selectedSurahs: number[], 
    surahNames: string[], 
    totalVerses: number, 
    options: CoverPageOptions
  ): string {
    return `
      <div style="height: ${this.pageHeight * 3.78}px; width: ${(this.pageWidth - 2 * this.margin) * 3.78}px; 
                  display: flex; flex-direction: column; justify-content: center; align-items: center; 
                  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                  color: white; text-align: center; padding: 40px; box-sizing: border-box;">
        
        <div style="background: rgba(255,255,255,0.1); padding: 40px; border-radius: 20px; 
                    backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2);">
          
          <h1 style="font-size: 48px; margin: 0 0 20px 0; font-weight: bold; 
                     text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
            ${options.title}
          </h1>
          
          <h2 style="font-size: 24px; margin: 0 0 30px 0; font-weight: normal; 
                     opacity: 0.9; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
            ${options.subtitle}
          </h2>
          
          <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; 
                      margin: 30px 0; border: 1px solid rgba(255,255,255,0.2);">
            <p style="font-size: 16px; margin: 0 0 10px 0; opacity: 0.9;">
              Selected Surahs: ${selectedSurahs.length} chapters
            </p>
          </div>
          
          ${this.generateContentsSection(selectedSurahs, surahNames)}
          
          <div style="margin-top: 40px; opacity: 0.7;">
            <p style="font-size: 14px; margin: 0;">Generated by Quran PDF Generator</p>
          </div>
        </div>
      </div>
    `;
  }

  private generateContentsSection(selectedSurahs: number[], surahNames: string[]): string {
    if (selectedSurahs.length > 10) return '';
    
    return `
      <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; 
                  margin: 20px 0; border: 1px solid rgba(255,255,255,0.2);">
        <h3 style="font-size: 18px; margin: 0 0 15px 0; opacity: 0.9;">Contents:</h3>
        <div style="text-align: left; max-width: 300px; margin: 0 auto;">
          ${surahNames.map((name, index) => `
            <p style="font-size: 14px; margin: 5px 0; opacity: 0.8; 
                     display: flex; justify-content: space-between;">
              <span>${name}</span>
              <span>Ch. ${selectedSurahs[index]}</span>
            </p>
          `).join('')}
        </div>
      </div>
    `;
  }

  private async renderCoverPage(coverContent: string): Promise<void> {
    const tempDiv = document.createElement('div');
    tempDiv.style.position = 'absolute';
    tempDiv.style.left = '-9999px';
    tempDiv.style.width = `${(this.pageWidth - 2 * this.margin) * 3.78}px`;
    tempDiv.style.height = `${this.pageHeight * 3.78}px`;
    tempDiv.style.backgroundColor = 'white';
    
    tempDiv.innerHTML = coverContent;
    document.body.appendChild(tempDiv);
    
    const canvas = await html2canvas(tempDiv, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: null
    });
    
    document.body.removeChild(tempDiv);
    
    const imgData = canvas.toDataURL('image/png');
    this.pdf.addImage(
      imgData, 
      'PNG', 
      this.margin, 
      this.margin, 
      this.pageWidth - 2 * this.margin, 
      this.pageHeight - 2 * this.margin
    );
  }
}